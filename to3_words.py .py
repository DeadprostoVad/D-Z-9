import re
import collections

def text(t):
    text = {}
    for i in t:
        if i in text:
            text[i] += 1
        else:
            text[i] = 1
    return text

def sorted_dict(val):
    sorted_dict = {}
    sorted_keys = sorted(val, key=val.get, reverse= True)
    for i in sorted_keys:
        sorted_dict[i] = val[i]
    return sorted_dict

def finall(val):
    n = 0
    final_dict = {}
    for i in val:
        if n == 3:
            break
        else:
            final_dict[i] = val[i]
            n += 1
    return final_dict

s = ''' Python: в русском языке встречаются названия пито́н или па́йтон
— высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью,
ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ.
Язык является полностью объектно-ориентированным в том плане, что всё является объектами. Необычной особенностью языка является выделение блоков кода 
пробельными отступами[28]. Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации.
Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов. 
Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом,
написанным на компилируемых языках, таких как C или C++.
Python является мультипарадигмальным языком программирования, поддерживающим императивное, процедурное,
структурное, объектно-ориентированное программирование, метапрограммирование и функциональное программирование. 
Задачи обобщённого программирования решаются за счёт динамической типизации.
Аспектно-ориентированное программирование частично поддерживается через декораторы,
более полноценная поддержка обеспечивается дополнительными фреймворками. 
Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений. 
Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, 
поддержка многопоточных вычислений с глобальной блокировкой интерпретатора (GIL), высокоуровневые структуры данных.
Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.'''

dict1 = re.findall(r"[\w']*[\w]*[\w']", s.lower())
dict2 = collections.Counter(dict1)

dict_sorted = sorted_dict(dict2)
final_dict = finall(dict_sorted)

print(final_dict)